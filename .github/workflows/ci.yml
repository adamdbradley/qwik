name: Qwik CI

on:
  push:
  pull_request:
  workflow_dispatch:
    name: 'Release'
    description: 'Commit version update to git, publish to NPM, and create a Github release.'
    inputs:
      version:
        description: 'Version'
        required: true
      disttag:
        description: 'NPM Dist Tag: latest, next, dev'
        required: true
        default: 'latest'

jobs:
  ############ BUILD PACKAGE ############
  build-package:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache NPM Dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-ubuntu-${{ hashFiles('yarn.lock') }}
          restore-keys: npm-cache-ubuntu-

      - name: Install NPM Dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build Package
        run: node scripts --tsc --build --api --set-version="${{ github.event.inputs.version }}" --set-dist-tag="${{ github.event.inputs.disttag }}"

      - name: Upload Package Build Artifacts
        uses: actions/upload-artifact@master
        with:
          name: dist-dev-builder-io-qwik
          path: dist-dev/@builder.io-qwik
          if-no-files-found: error

  ############ BUILD NODEJS WASM ############
  build-wasm-nodejs:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Build NodeJS WASM
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'latest'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build NodeJS WASM
        working-directory: ./src/wasm
        run: wasm-pack build --target=nodejs --release --out-dir=../../dist-wasm --out-name=qwik.nodejs.wasm

      - name: Print Output
        run: ls -R

      - name: Upload NodeJS WASM Build Artifacts
        uses: actions/upload-artifact@master
        with:
          name: dist-wasm-nodejs
          path: dist-wasm/
          if-no-files-found: error

  ############ BUILD WEB WASM ############
  build-wasm-web:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Build Web WASM
    runs-on: ubuntu-latest
    env:
      CARGO_PROFILE_RELEASE_LTO: true
      CARGO_PROFILE_RELEASE_PANIC: abort
      CARGO_PROFILE_RELEASE_OPT_LEVEL: z
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'latest'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build Web WASM
        working-directory: ./src/wasm
        run: wasm-pack build --target=web --release --out-dir=../../dist-wasm --out-name=qwik.web.wasm

      - name: Print Output
        run: ls -R

      - name: Upload Web WASM Build Artifacts
        uses: actions/upload-artifact@master
        with:
          name: dist-wasm-web
          path: dist-wasm/
          if-no-files-found: error

  ############ BUILD PLATFORM BINDINGS ############
  build-bindings:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build.napi
              strip -x *.node

          # - host: macos-latest
          #   target: aarch64-apple-darwin
          #   build: |
          #     yarn build.napi --target=aarch64-apple-darwin
          #     strip -x *.node

          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              yarn build.napi --config=napi.config.json

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    defaults:
      run:
        working-directory: ./src/napi/
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.settings.target }}

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
          args: --manifest-path=src/napi/Cargo.toml

      - name: Cache Cargo Registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@16-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo Index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@16-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM Dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-${{ matrix.settings.target }}-${{ hashFiles('yarn.lock') }}
          restore-keys: npm-cache-${{ matrix.settings.target }}-

      - name: Pull Latest Image
        run: ${{ matrix.settings.docker }}
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.settings.docker }}

      - name: Setup Toolchain
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}
        shell: bash

      - name: Install NPM Dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build Binding
        run: ${{ matrix.settings.build }}
        shell: bash
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload Binding Artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist-platform-${{ matrix.settings.target }}
          path: src/napi/*.node

  ############ RELEASE ############
  release:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build-package
      - build-wasm-nodejs
      - build-wasm-web
      - build-bindings

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Build Artifacts
        uses: actions/download-artifact@v2

      - name: Create dist-dev directory
        run: mkdir dist-dev

      - name: Print Package Build Artifacts
        run: ls -R dist-dev-builder-io-qwik

      - name: Move Package Artifacts
        run: |
          mv dist-dev-builder-io-qwik dist-dev
          mv dist-dev/dist-dev-builder-io-qwik dist-dev/@builder.io-qwik

      - name: Print WASM Build Artifacts
        run: ls -R dist-wasm-*/*

      - name: Move WASM Artifacts
        run: |
          mv dist-wasm-*/*.{wasm,js} dist-dev/@builder.io-qwik

      - name: Print Platform Build Artifacts
        run: ls -R dist-platform-*/*.node

      - name: Move Platform Binding Artifacts
        run: mv dist-platform-*/*.node dist-dev/@builder.io-qwik

      - name: Cache NPM Dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-ubuntu-${{ hashFiles('yarn.lock') }}
          restore-keys: npm-cache-ubuntu-

      - name: Install NPM Dependencies
        run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Dry-Run Publish @builder.io/qwik
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: node scripts --set-version="${{ github.event.inputs.version }}" --set-dist-tag="${{ github.event.inputs.disttag }}" --publish --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish @builder.io/qwik
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: node scripts --set-version="${{ github.event.inputs.version }}" --set-dist-tag="${{ github.event.inputs.disttag }}" --publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Github Release
        if: ${{ github.event_name == 'workflow_dispatch' && success() }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: 'v${{ github.event.inputs.version }}'
          files: dist-dev/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Qwik Package Artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@master
        with:
          name: builder-io-qwik
          path: dist-dev/*.tgz

      - name: Upload Changelog Artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@master
        with:
          name: Changelog
          path: dist-dev/CHANGELOG.md

  ############ LINT ############
  # lint:
  #   name: Lint
  #   if: ${{ github.event_name != 'release' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  # - name: Cache NPM Dependencies
  #   uses: actions/cache@v2
  #   with:
  #     path: node_modules
  #     key: npm-cache-ubuntu-${{ hashFiles('yarn.lock') }}
  #     restore-keys: npm-cache-ubuntu-

  #     - name: Install NPM Dependencies
  #       run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
  # env:
  #   NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  #     - name: Prettier Check
  #       run: yarn prettier-check

  #     - name: Lint Check
  #       run: yarn lint

  ############ UNIT TEST ############
  # unit-tests:
  #   name: Unit Tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 10.x
  #         registry-url: https://registry.npmjs.org/

  #     - name: Checkout
  #       uses: actions/checkout@v2

  # - name: Cache NPM Dependencies
  #   uses: actions/cache@v2
  #   with:
  #     path: node_modules
  #     key: npm-cache-ubuntu-${{ hashFiles('yarn.lock') }}
  #     restore-keys: npm-cache-ubuntu-

  #     - name: Install NPM Dependencies
  #       run: yarn install --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
  # env:
  #   NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  #     - name: Unit Tests
  #       run: |
  #         yarn build
  #         yarn test.unit

  ############ E2E TEST ############
  # e2e-tests:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 10.x
  #         registry-url: https://registry.npmjs.org/

  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: E2E Tests
  #       uses: cypress-io/github-action@v2
  #       with:
  #         install-command: yarn --frozen-lockfile --ignore-engines
  #         start: yarn integration.server.prod
  #         wait-on: 'http://localhost:8081'
  #         wait-on-timeout: 120
  #         browser: chrome
  #         record: true
  #         group: 'Qwik E2E Test Group'
  #         spec: cypress/integration/*
  #         config-file: cypress/cypress.json
  #         config: defaultCommandTimeout=10000
  #       env:
  #         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Upload Videos Artifacts
  #       uses: actions/upload-artifact@v1
  #       if: always()
  #       with:
  #         name: Cypress Videos
  #         path: cypress/videos
